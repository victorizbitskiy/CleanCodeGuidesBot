{
  "source": "https://github.com/labs42io/clean-code-typescript",
  "content": [
    {
      "item": "variables",
      "children": [
        { "item": "use-meaningful-variable-names" },
        { "item": "use-pronounceable-variable-names" },
        { "item": "use-the-same-vocabulary-for-the-same-type-of-variable" },
        { "item": "use-searchable names" },
        { "item": "use-explanatory-variables" },
        { "item": "avoid-mental-mapping" },
        { "item": "dont-add-unneeded-context" },
        {
          "item": "use-default-arguments-instead-of-short-circuiting-or-conditionals"
        },
        { "item": "use-enum-to-document-the-intent" }
      ]
    },
    {
      "item": "functions",
      "children": [
        { "item": "function-arguments-2-or-fewer-ideally" },
        { "item": "functions-should-do-one-thing" },
        { "item": "function-names-should-say-what-they-do" },
        { "item": "functions-should-only-be-one-level-of-abstraction" },
        { "item": "remove-duplicate-code" },
        { "item": "set-default-objects-with-objectassign" },
        { "item": "dont-use-flags-as-function-parameters" },
        { "item": "avoid-side-effects-part-1" },
        { "item": "avoid-side-effects-part-2" },
        { "item": "dont-write-to-global-functions" },
        { "item": "favor-functional-programming-over-imperative-programming" },
        { "item": "encapsulate-conditionals" },
        { "item": "avoid-negative-conditionals" },
        { "item": "avoid-conditionals" },
        { "item": "avoid-type-checking" },
        { "item": "dont-over-optimize" },
        { "item": "remove-dead-code" },
        { "item": "use-iterators-and-generators" }
      ]
    },
    {
      "item": "objects-and-data-structures",
      "children": [
        { "item": "use-getters-and-setters" },
        { "item": "make-objects-have-private-members" },
        { "item": "prefer-immutability" },
        { "item": "type-vs-interface" }
      ]
    },
    {
      "item": "classes",
      "children": [
        { "item": "classes-should-be-small" },
        { "item": "high-cohesion-and-low-coupling" },
        { "item": "prefer-composition-over-inheritance" },
        { "item": "use-method-chaining" }
      ]
    },
    {
      "item": "solid",
      "children": [
        { "item": "single-responsibility-principle-srp" },
        { "item": "openclosed-principle-ocp" },
        { "item": "liskov-substitution-principle-lsp" },
        { "item": "interface-segregation-principle-isp" },
        { "item": "dependency-inversion-principle-dip" }
      ]
    },
    {
      "item": "testing",
      "children": [
        { "item": "testing" },
        { "item": "the-three-law-of-tdd" },
        { "item": "first-rules" },
        { "item": "single-concept-per-test" },
        { "item": "the-name-of-the-test-should-reveal-its-intention" }
      ]
    },
    {
      "item": "concurrency",
      "children": [
        { "item": "prefer-promises-vs-callbacks" },
        { "item": "asyncawait-are-even-cleaner-than-promises" }
      ]
    },
    {
      "item": "error-handling",
      "children": [
        { "item": "error-handling" },
        { "item": "always-use-error-for-throwing-or-rejecting" },
        { "item": "dont-ignore-caught-errors" },
        { "item": "dont-ignore-rejected-promises" }
      ]
    },
    {
      "item": "formatting",
      "children": [
        { "item": "formatting" },
        { "item": "migrating-from-tslint-to-eslint" },
        { "item": "use-consistent-capitalization" },
        { "item": "function-callers-and-callees-should-be-close" },
        { "item": "organize-imports" },
        { "item": "use-typescript-aliases" }
      ]
    },
    {
      "item": "comments",
      "children": [
        { "item": "comments" },
        { "item": "prefer-self-explanatory-code-instead-of-comments" },
        { "item": "dont-leave-commented-out-code-in-your-codebase" },
        { "item": "dont-have-journal-comments" },
        { "item": "avoid-positional-markers" },
        { "item": "todo-comments" }
      ]
    }
  ]
}
